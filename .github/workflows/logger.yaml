name: Daily Commit Logger

on:
  schedule:
    - cron: "0 0 * * *" # Runs at midnight UTC
  workflow_dispatch: # Allows manual trigger

jobs:
  log-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: |
          echo "date=$(date -d 'yesterday' +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "full_date=$(date -d 'yesterday' +'%B %d, %Y')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create package.json
        run: |
          cat > package.json << 'EOF'
          {
            "name": "commit-tracker",
            "type": "module",
            "dependencies": {
              "@octokit/rest": "^20.0.0"
            }
          }
          EOF

      - name: Create Commit Log Script
        run: |
          cat > get-commits.js << 'EOF'
          import { Octokit } from '@octokit/rest';

          async function getCommits() {
            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN
            });

            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            yesterday.setHours(0, 0, 0, 0);

            const today = new Date();
            today.setDate(today.getDate() - 1);
            today.setHours(23, 59, 59, 999);

            // Get user's repositories
            const { data: repos } = await octokit.repos.listForAuthenticatedUser({
              per_page: 100,
              sort: 'updated'
            });

            let allCommits = [];

            for (const repo of repos) {
              try {
                const { data: commits } = await octokit.repos.listCommits({
                  owner: repo.owner.login,
                  repo: repo.name,
                  author: process.env.GITHUB_ACTOR,
                  since: yesterday.toISOString(),
                  until: today.toISOString(),
                  per_page: 100
                });

                const repoCommits = commits.map(commit => ({
                  repo: repo.full_name,
                  message: commit.commit.message,
                  url: commit.html_url,
                  timestamp: commit.commit.author.date
                }));

                allCommits = [...allCommits, ...repoCommits];
              } catch (error) {
                console.error(`Error fetching commits for ${repo.full_name}:`, error.message);
              }
            }

            // Sort commits by timestamp
            allCommits.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

            // Generate markdown
            let markdown = `# Commit Log for ${process.env.LOG_DATE}\n\n`;

            if (allCommits.length === 0) {
              markdown += '📭 No commits found for this day.\n';
            } else {
              markdown += `📝 Total Commits: ${allCommits.length}\n\n`;

              // Group commits by repository
              const commitsByRepo = allCommits.reduce((acc, commit) => {
                if (!acc[commit.repo]) {
                  acc[commit.repo] = [];
                }
                acc[commit.repo].push(commit);
                return acc;
              }, {});

              // Generate markdown for each repository
              for (const [repo, commits] of Object.entries(commitsByRepo)) {
                markdown += `## 📁 ${repo}\n\n`;
                commits.forEach(commit => {
                  const time = new Date(commit.timestamp).toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit'
                  });
                  markdown += `- \`${time}\` [${commit.message.split('\n')[0]}](${commit.url})\n`;
                });
                markdown += '\n';
              }
            }

            console.log(markdown);
          }

          getCommits().catch(console.error);
          EOF

      - name: Install dependencies
        run: npm install @octokit/rest

      - name: Generate commit log
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          LOG_DATE: ${{ steps.date.outputs.full_date }}
        run: |
          node get-commits.js > "commit-log.md"

      - name: Checkout logs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/commit-tracker
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: commit-tracker

      - name: Update logs repository
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p commit-tracker/logs/${{ steps.date.outputs.date }}

          # Move the generated log file
          mv commit-log.md commit-tracker/logs/${{ steps.date.outputs.date }}/LOG.md

          # Update the main README if it exists
          if [ -f commit-tracker/LOG.md ]; then
            sed -i "1i - [${{ steps.date.outputs.full_date }}](logs/${{ steps.date.outputs.date }})" commit-tracker/LOG.md
          else
            echo "# Daily Commit Logs\n\n- [${{ steps.date.outputs.full_date }}](logs/${{ steps.date.outputs.date }})" > commit-tracker/LOG.md
          fi

          # Configure git
          cd commit-tracker
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add .
          git commit -m "📝 Add commit log for ${{ steps.date.outputs.date }}"
          git push
