name: Daily Commit Logger

on:
  schedule:
    - cron: "30 18 * * *" # Runs at midnight IST
  workflow_dispatch: # Allows manual trigger

jobs:
  log-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: |
          echo "date=$(TZ='Asia/Kolkata' date -d 'yesterday' +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "full_date=$(TZ='Asia/Kolkata' date -d 'yesterday' +'%B %d, %Y')" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Create package.json
        run: |
          cat > package.json << 'EOF'
          {
            "name": "commit-logger",
            "type": "module",
            "dependencies": {
              "@octokit/rest": "^20.0.0"
            }
          }
          EOF

      - name: Create Commit Log Script
        run: |
          cat > get-commits.js << 'EOF'
          import { Octokit } from '@octokit/rest';

          async function getCommits() {
            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN
            });

            // Function to convert UTC to IST
          function convertToIST(date) {
            return new Date(date.getTime() + (5.5 * 60 * 60 * 1000));
          }

          // Function to convert IST to UTC
          function convertToUTC(date) {
            return new Date(date.getTime() - (5.5 * 60 * 60 * 1000));
          }

          // Set yesterday and today in IST
          let yesterdayIST = convertToIST(new Date());
          yesterdayIST.setDate(yesterdayIST.getDate() - 1);
          yesterdayIST.setHours(0, 0, 0, 0);
          yesterdayIST = convertToIST(yesterdayIST);

          let todayIST = convertToIST(new Date());
          todayIST.setDate(todayIST.getDate() - 1);
          todayIST.setHours(23, 59, 59, 999);
          todayIST = convertToIST(todayIST);

          // console.log(`Scanning commits between ${yesterdayIST} and ${todayIST}`);

          // Get all user's repositories with pagination
          const repos = await octokit.paginate(octokit.repos.listForAuthenticatedUser, {
            per_page: 100,
            sort: 'updated'
          });

          let allCommits = new Map(); // Using Map to avoid duplicate commits

          for (const repo of repos) {
            try {
              // console.log(`Scanning ${repo.full_name}`);

              // Get all open PRs in the repository
              const pullRequests = await octokit.paginate(octokit.pulls.list, {
                owner: repo.owner.login,
                repo: repo.name,
                state: 'all', // Get both open and closed PRs
                sort: 'updated',
                direction: 'desc',
                per_page: 100
              });

              // Filter PRs by the user
              const userPRs = pullRequests.filter(pr =>
                pr.user.login === process.env.GITHUB_ACTOR && (
                  convertToIST(new Date(pr.updated_at)) >= yesterdayIST
                )
              );

              for (const pr of userPRs) {
                // Get commits from the PR
                const prCommits = await octokit.paginate(octokit.pulls.listCommits, {
                  owner: repo.owner.login,
                  repo: repo.name,
                  pull_number: pr.number,
                  per_page: 100
                });

                // Filter commits by date and author
                const filteredCommits = prCommits.filter(commit => {
                  const commitDate = convertToIST(new Date(commit.commit.author.date));
                  return (
                    commit.author?.login === process.env.GITHUB_ACTOR &&
                    commitDate >= yesterdayIST &&
                    commitDate <= todayIST
                  );
                });

                // Add commits to the map using SHA as key to avoid duplicates
                filteredCommits.forEach(commit => {
                  allCommits.set(commit.sha, {
                    repo: repo.full_name,
                    pr: {
                      number: pr.number,
                      title: pr.title,
                      url: pr.html_url,
                      state: pr.state
                    },
                    message: commit.commit.message,
                    url: commit.html_url,
                    timestamp: commit.commit.author.date
                  });
                });
              }

              // Also get direct commits to default branch
              const defaultBranchCommits = await octokit.paginate(octokit.repos.listCommits, {
                owner: repo.owner.login,
                repo: repo.name,
                author: process.env.GITHUB_ACTOR,
                since: convertToUTC(yesterdayIST).toISOString(),
                until: convertToUTC(todayIST).toISOString(),
                per_page: 100
              });

              defaultBranchCommits.forEach(commit => {
                allCommits.set(commit.sha, {
                  repo: repo.full_name,
                  pr: null,
                  message: commit.commit.message,
                  url: commit.html_url,
                  timestamp: commit.commit.author.date
                });
              });

            } catch (error) {
              console.error(`Error processing ${repo.full_name}:`, error.message);
            }
          }

          // Convert Map to Array and sort by timestamp
          const sortedCommits = Array.from(allCommits.values())
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

          // Generate markdown
          let markdown = `# Commit Log for ${process.env.LOG_DATE}\n\n`;

          if (sortedCommits.length === 0) {
            markdown += '📭 No commits found for this day.\n';
          } else {
            markdown += `📝 Total Commits: ${sortedCommits.length}\n\n`;

            // Group commits by repository
            const commitsByRepo = sortedCommits.reduce((acc, commit) => {
              if (!acc[commit.repo]) {
                acc[commit.repo] = {
                  directCommits: [],
                  prCommits: {}
                };
              }

              if (commit.pr) {
                const prKey = `#${commit.pr.number} - ${commit.pr.title}`;
                if (!acc[commit.repo].prCommits[prKey]) {
                  acc[commit.repo].prCommits[prKey] = {
                    pr: commit.pr,
                    commits: []
                  };
                }
                acc[commit.repo].prCommits[prKey].commits.push(commit);
              } else {
                acc[commit.repo].directCommits.push(commit);
              }

              return acc;
            }, {});

            // Generate markdown for each repository
            for (const [repo, data] of Object.entries(commitsByRepo)) {
              markdown += `## 📁 ${repo}\n\n`;

              // Add direct commits if any
              if (data.directCommits.length > 0) {
                markdown += `### 🔨 Direct Commits\n\n`;
                data.directCommits.forEach(commit => {
                  const istTime = convertToIST(new Date(commit.timestamp)).toLocaleTimeString('en-IN', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: true
                  });
                  markdown += `- \`${istTime} IST\` [${commit.message.split('\n')[0]}](${commit.url})\n`;
                });
                markdown += '\n';
              }

              // Add PR commits
              for (const [prKey, prData] of Object.entries(data.prCommits)) {
                const stateEmoji = prData.pr.state === 'open' ? '🟢' : '🟣';
                markdown += `### ${stateEmoji} [PR ${prKey}](${prData.pr.url})\n\n`;
                prData.commits.forEach(commit => {
                  const time = convertToIST(new Date(commit.timestamp)).toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit'
                  });
                  markdown += `- \`${time}\` [${commit.message.split('\n')[0]}](${commit.url})\n`;
                });
                markdown += '\n';
              }
            }
          }

          console.log(markdown);
          }

          getCommits().catch(console.error);
          EOF

      - name: Install dependencies
        run: npm install

      - name: Generate commit log
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          LOG_DATE: ${{ steps.date.outputs.full_date }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          node get-commits.js > "commit-log.md"

      - name: Checkout logs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.actor }}/commit-tracker
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: commit-tracker

      - name: Update logs repository
        run: |
          # Create logs directory if it doesn't exist
          mkdir -p commit-tracker/logs/${{ steps.date.outputs.date }}

          # Move the generated log file
          mv commit-log.md commit-tracker/logs/${{ steps.date.outputs.date }}/LOG.md

          # Update the main README if it exists
          if [ -f commit-tracker/README.md ]; then
            sed -i "$a\ - [${{ steps.date.outputs.full_date }}](logs/${{ steps.date.outputs.date }}/LOG.md)" commit-tracker/README.md
          else
            echo "# Daily Commit Logs\n\n- [${{ steps.date.outputs.full_date }}](logs/${{ steps.date.outputs.date }})" > commit-tracker/README.md
          fi

          # Configure git
          cd commit-tracker
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add .
          git commit -m "📝 Add commit log for ${{ steps.date.outputs.date }}"
          git push
